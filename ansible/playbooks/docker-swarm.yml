---
- hosts: docker_swarm_managers
  become: yes
  roles:
    - ../roles/docker-swarm

- hosts: docker_swarm_managers
  remote_user: ansible
  become: true
  tasks:
    - name: Determine Swarm status.
      shell: >
        docker info | grep 'Swarm: ' | cut -d ' ' -f3
      register: swarm_status
      check_mode: no

    - name: Create swarm_manager_operational group.
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create swarm_manager_bootstrap group.
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true


- hosts: docker_swarm
  remote_user: ansible
  become: true
  tasks:
    - name: Determine Swarm status.
      shell: >
        docker info | grep 'Swarm: ' | cut -d ' ' -f3
      register: swarm_status
      check_mode: no

    - name: Create swarm_worker_operational group.
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create swarm_worker_bootstrap group.
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: Initialize Swarm cluster.
      shell: >
        docker swarm init
        --advertise-addr={{ network_interface | default('eth1') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_operational group.
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node.changed

- hosts: swarm_manager_operational[0]
  remote_user: ansible
  become: true
  vars:
    iface: "{{ network_interface | default('eth1') }}"
  tasks:
    - name: Retrieve Swarm manager token.
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: Retrieve swarm worker token.
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: Populate list of manager IPs.
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  remote_user: ansible
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join manager nodes to cluster.
      shell: >
        docker swarm join
        --advertise-addr={{ network_interface | default('eth1') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: swarm_worker_bootstrap:!swarm_worker_operational:!docker_swarm_managers
  remote_user: ansible
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join worker nodes to cluster.
      shell: >
        docker swarm join
        --advertise-addr={{ network_interface | default('eth1') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: docker_swarm
  remote_user: ansible
  become: true
  gather_facts: false
  tasks:
    - name: Add cronjob for Docker Swarm cleanup.
      cron:
        name: "Cleanup of old containers, volumes, networks and images"
        minute: "0"
        hour: "2"
        job: "docker system prune -a -f --volumes"
